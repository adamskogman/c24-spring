<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="spring-integration">
	<title>C24 IO Spring Integration Support</title>

	<section id="si-intro">
		<title>Introduction</title>
		<para>
			C24 IO Spring Integration support extends the Spring Integration Core
			with implementations of transformers,
			selector and routers designed
			to make working with C24 IO Complex Data Object messages in Spring
			Integration simple.
			The provided messaging components are designed to work with any data represented as a
			ComplexDataObject.
		</para>
		<para>
			Also provided are unmarshaling and marshalling transformers for turning
			String or byte type payloads into
			C24 IO
			Complex Data Objects, and turning CDOs back intp String or bytes.
			We're using transformer to mean Spring Integration
			transformer, not a IO transform.
		</para>
		<para>
			This guide will emphasise the use of Spring XML namespaces to configure C24 IO Spring components.

			The namespaces are
			configured like this:
			<programlisting language="xml"><![CDATA[
			 <beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:int-c24="http://www.c24.biz/schema/spring-integration"
	xmlns:c24="http://www.c24.biz/schema/spring-core" xmlns:int="http://www.springframework.org/schema/integration"
	xsi:schemaLocation="http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-2.0.xsd
		http://www.c24.biz/schema/spring-core http://www.c24.biz/schema/spring-core.xsd
		http://www.c24.biz/schema/spring-integration http://www.c24.biz/schema/spring-integration.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
			 ]]></programlisting>
		</para>
	</section>
	<section id="unmarshalling">
		<title>Unmarshalling Payloads</title>
		<para>
			This section will explain how to use the unmarshalling (parsing) capabilities of C24 IO within the Spring
			Integration
			Framework. The basis for C24 IO unmarshalling is the
			<classname>Source</classname>
			class. In Spring Integration, unmarshalling is implemented as a Spring Integration
			<emphasis>Transformer</emphasis>
			.
		</para>
		<section id="unmarshalling-namespace">
			<title>Using the XML namespace</title>

			<para>
				Configuring an unmarshalling transformer using the namespace:
				<programlisting language="xml"><![CDATA[<int-c24:unmarshalling-transformer
		source-factory-ref="textualSourceFactory"
		model-ref="inputDocumentModel"
		input-channel="..."
		output-channel="..." />
			 ]]></programlisting>

				Two specific attributes are required. The
				<emphasis>source-factory-ref</emphasis>
				is a
				<interfacename>SourceFactory</interfacename>
				defined as a bean elsewhere in the XML config. There are many
				<interfacename>SourceFactory</interfacename>
				implementations,
				each wrapping a C24 IO
				<classname>Source</classname>
				implementation. E.g. the is a
				<classname>XmlSourcefactory</classname>
				, a
				<classname>TextualSourceFactory</classname>
				and a
				<classname>FixSourceFactory</classname>
				.
			</para>
		</section>

		<section id="unmarshalling-input">
			<title>Input to the Unmarshalling Transformer</title>
			<para>
				These are the message payloads supported by the unmarshalling transformer. They will be passed to the
				C24
				<classname>Source</classname>
				either as a
				<interfacename>Reader</interfacename>
				(you can't control the encoding) or a
				<interfacename>InputStream</interfacename>
				(you can configure the encoding on the
				<classname>SourceFactory</classname>
				).
				<itemizedlist>
					<listitem>
						<para>
							<interfacename>Reader</interfacename>
							- will be passed as-is.
						</para>
					</listitem>
					<listitem>
						<para>
							<classname>String</classname>
							- will be passed as a
							<classname>StringReader</classname>
							.
						</para>
					</listitem>
					<listitem>
						<para>
							<interfacename>InputStream</interfacename>
							- will be passed as-is.
						</para>
					</listitem>
					<listitem>
						<para>
							<classname>byte[]</classname>
							- will be passed as a
							<classname>ByteArrayInputStream</classname>
							.
						</para>
					</listitem>
					<listitem>
						<para>
							<classname>File</classname>
							- will be passed as a
							<classname>FileInputStream</classname>
							.
						</para>
					</listitem>
				</itemizedlist>
			</para>
			<para>
				The actual unmarshalling is determined by the C24
				<classname>Source</classname>
				that is used.
				The package
				<classname>biz.c24.io.spring.source</classname>
				holds a number of
				<interfacename>SourceFactory</interfacename>
				implementations that wrap different C24 Sources. All the configuration properties that you would usually
				find on the
				Source subclass (such as
				<methodname>setEncoding()</methodname>
				) is available on the individual
				SourceFactory implementations.
			</para>
			<para>
				The source factories are configured as beans, like so:
				<programlisting language="xml"><![CDATA[<bean id="textualSourceFactory" class="biz.c24.io.spring.source.TextualSourceFactory">
	<property name="encoding" value="UTF-8"/>
</bean>]]></programlisting>
			</para>
		</section>

		<!-- Add section on configuring as a bean -->

	</section>

	<section id="marshalling">
		<title>Marshalling with C24 Sinks</title>
		<para>
			This section will explain how to use the marshalling capabilities of C24 IO within the Spring
			Integration
			Framework.
			The basis for C24 IO marshalling is the
			<classname>Sink</classname>
			classes. In Spring Integration, marshalling is implemented as a Spring Integration
			<emphasis>Transformer</emphasis>
			.
		</para>

		<section id="marshalling-namespace">
			<title>Marshalling using the XML namespace</title>
			<para>
				A marshalling transformer is configured like this:
				<programlisting language="xml"><![CDATA[<int-c24:marshalling-transformer
	input-channel="..." output-channel="..."
	sink-factory="xmlSinkFactory" output-type="BYTE_ARRAY" />]]></programlisting>
				The sink-factory is a reference to a
				<interfacename>SinkFactory</interfacename>
				that is defined as a bean. The output-type is an enum vale that determines if the output is a String or a byte
				array.
			</para>

		</section>
		<section id="marshalling-output">
			<title>Output options for the marshalling transformer</title>
			<para>
				The actual marshalling is determined by the C24
				<classname>Sink</classname>
				that is used.
				The package
				<classname>biz.c24.io.spring.sink</classname>
				holds a number of
				<interfacename>SinkFactory</interfacename>
				implementations that wrap different C24 sinks. All the configuration properties that you would usually
				find on the
				Sink subclass (such as
				<methodname>setEncoding()</methodname>
				) is available on the individual
				SinkFactory implementations.
			</para>
			<para>
				The output type determines what kind of payload will be output from the marshaling transformer.
				<itemizedlist>
					<listitem>
						<para>
							<emphasis>STRING</emphasis>
							will output a
							<classname>String</classname>
							as the payload.
							It's up to the user to determine if that makes sense given the chose Sink type.
						</para>
					</listitem>
					<listitem>
						<para>
							<emphasis>BYTE_ARRAY</emphasis>
							will output a
							<classname>byte[]</classname>
							as the payload.
							It's up to you to determine if that makes sense given the chose Sink type. Configure the
							encoding on the
							<interfacename>SinkFactory</interfacename>
							.
						</para>
					</listitem>
				</itemizedlist>
			</para>

		</section>

		<!-- TODO
			<section id="marshalling-bean-config"></section>
		 -->
	</section>

	<section id="transformation">
		<title>Using C24 Transforms</title>
		<section id="transformation-namespace"></section>
		<section id="transformation-input"></section>
		<section id="transformation-output"></section>
		<section id="transformation-bean-config"></section>
	</section>

	<section id="xpath">
		<title>Using C24 XPath</title>
		<section id="xpath-transformation"></section>
		<section id="xpath-router"></section>
		<section id="xpath-selector"></section>
		<section id="xpath-header-enricher"></section>
	</section>


</chapter>
