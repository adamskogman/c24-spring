<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<chapter id="spring-core">
  <title>C24 IO support for Spring</title>

  <abstract>
    <para>C24 IO can be integrated into several of the core Spring Framework
    features as well. C24 IO plugs into Spring-WS for SOAP based services,
    replacing the XML marshalling framework. If plugs into Spring MVC for
    building REST interfaces using C24 IO marshalling and unmarshalling,
    allowing any C24 IO supported data type to be passed seamlessly over
    REST/HTTP.</para>
  </abstract>

  <section id="core.model">
    <title>C24 model</title>

    <para>The very core of the C24 Spring integration is integrating a C24
    model into a Spring application. To do so the core module contains a
    <classname>C24Model</classname> class that can be constructed by handing
    it an <classname>Element</classname> from you generated model
    classes.</para>

    <example>
      <title>Programatically setting up a <classname>C24Model</classname>
      instance</title>

      <programlisting language="java">C24Model model = new C24Model(YourGeneratedElementClass.getInstance());</programlisting>
    </example>

    <para>To ease that process in a Spring application we offer a namespace
    element that allows you to either define the
    <classname>Element</classname> class to build the model from or define a
    base package to scan for C24 classes.</para>

    <example>
      <title>Using the XMl namespace to setup a C24 model</title>

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c24="http://schema.c24.biz/spring-core"
       xsi:schemaLocation="…"&gt;

  &lt;c24:model base-package="com.acme.mypackage" /&gt;

  &lt;!-- or --&gt;

  &lt;c24:model base-element="com.acme.mypackage.SampleModelDocumentRootElement" /&gt;
&lt;/beans&gt;</programlisting>
    </example>

    <para>If you don't add an <code>id</code>-attribute to the model element
    we will default to <code>_c24model</code>. All other namespace elements
    will reference the model bean by this id by default so that you should
    need to wire the model into those explictly. However if you have multiple
    C24 modely in your app, you have to assign an id to them and then refer to
    them via the model-ref attribute of other namespace element.</para>
  </section>

  <section id="core.message-converters">
    <title>HttpMessageConverters</title>

    <para>Building REST webservices with Spring MVC you might want to easily
    marsha your C24 data structures defined into IO objects and vice versa. To
    do so we ship a configurable
    <classname>HttpMessageConverter</classname>:</para>

    <example>
      <title>Setting up HttpMessageconverters to bind request and response
      data to C24 objects</title>

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c24="http://schema.c24.biz/spring-core"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="…"&gt;

  &lt;c24:model base-package="com.acme.mypackage" /&gt;

  &lt;mvc:annotation-driven&gt;
    &lt;mvc:message-converters&gt;
      &lt;c24:http-message-converter&gt;
        &lt;c24:format type="TEXT" /&gt;
        &lt;c24:format type="XML" content-type="application/vnd.foo+xml" /&gt;
      &lt;/c24:http-message-converter&gt;
    &lt;/mvc:message-converters&gt;
  &lt;/mvc:annotation-driven&gt;

&lt;/beans&gt;</programlisting>
    </example>

    <para>The <code>http-message-converter</code> gets a set of
    <code>format</code> elements configured that define which representation
    shall be supported and for which content type each of them shall be
    returned. If you don't configure a content type we assume defaults like
    <code>text-plain</code>, <code>application/xml</code> and so on.</para>
  </section>

  <section id="core.oxm">
    <title>OXM integration</title>

    <para>If you are using the Spring OXM module it's easy to set up a
    <interfacename>Marshaller</interfacename>/<interfacename>Unmarshaller</interfacename>
    instance capable of handling C24 IO data like this:</para>

    <example>
      <title>Configuring an Spring C24 OXM marshaller</title>

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c24="http://schema.c24.biz/spring-core"
       xsi:schemaLocation="…"&gt;

  &lt;c24:marshaller id="marshaller" /&gt;

  &lt;c24:model base-package="com.acme.mypackage" /&gt;

&lt;/beans&gt;</programlisting>
    </example>
  </section>
</chapter>